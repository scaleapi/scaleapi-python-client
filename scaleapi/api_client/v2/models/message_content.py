# coding: utf-8

"""
    GenAI API Spec

    Data Engine: Generative AI API Specification

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from scaleapi.api_client.v2.models.chunk import Chunk
from scaleapi.api_client.v2.models.detailed_file import DetailedFile
from scaleapi.api_client.v2.models.reasoning import Reasoning
from scaleapi.api_client.v2.models.reference_text import ReferenceText
from typing import Optional, Set
from typing_extensions import Self

class MessageContent(BaseModel):
    """
    MessageContent
    """ # noqa: E501
    text: Optional[StrictStr] = Field(default=None, description="A plain text field.")
    reference_texts: Optional[List[ReferenceText]] = Field(default=None, description="A list of files or attachments associated with the message.")
    attachments: Optional[List[DetailedFile]] = Field(default=None, description="A list of files or attachments associated with the message.")
    chunks: Optional[List[Chunk]] = None
    reasoning: Optional[List[Reasoning]] = None
    __properties: ClassVar[List[str]] = ["text", "reference_texts", "attachments", "chunks", "reasoning"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        excluded_fields: Set[str] = set([
        ])
        return self.model_dump_json(by_alias=True, exclude_unset=True, exclude=excluded_fields)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessageContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reference_texts (list)
        _items = []
        if self.reference_texts:
            for _item_reference_texts in self.reference_texts:
                if _item_reference_texts:
                    _items.append(_item_reference_texts.to_dict())
            _dict['reference_texts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in chunks (list)
        _items = []
        if self.chunks:
            for _item_chunks in self.chunks:
                if _item_chunks:
                    _items.append(_item_chunks.to_dict())
            _dict['chunks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reasoning (list)
        _items = []
        if self.reasoning:
            for _item_reasoning in self.reasoning:
                if _item_reasoning:
                    _items.append(_item_reasoning.to_dict())
            _dict['reasoning'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessageContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "text": obj.get("text"),
            "reference_texts": [ReferenceText.from_dict(_item) for _item in obj["reference_texts"]] if obj.get("reference_texts") is not None else None,
            "attachments": [DetailedFile.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "chunks": [Chunk.from_dict(_item) for _item in obj["chunks"]] if obj.get("chunks") is not None else None,
            "reasoning": [Reasoning.from_dict(_item) for _item in obj["reasoning"]] if obj.get("reasoning") is not None else None
        })
        return _obj
