# coding: utf-8

"""
    GenAI API Spec

    Data Engine: Generative AI API Specification

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from scaleapi.api_client.v2.models.annotation import Annotation
from scaleapi.api_client.v2.models.submission import Submission
from scaleapi.api_client.v2.models.turn import Turn
from typing import Optional, Set
from typing_extensions import Self

class Thread(BaseModel):
    """
    Represents a thread of messages in a task.
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier for a thread")
    turns: List[Turn] = Field(description="[Turns](/core-resources/turn) within the thread. ")
    submissions: Optional[List[Submission]] = Field(default=None, description="List of contributor submission details made to the thread.")
    annotations: List[Annotation] = Field(description="Array of annotations.")
    __properties: ClassVar[List[str]] = ["id", "turns", "submissions", "annotations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        excluded_fields: Set[str] = set([
        ])
        return self.model_dump_json(by_alias=True, exclude_unset=True, exclude=excluded_fields)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Thread from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in turns (list)
        _items = []
        if self.turns:
            for _item_turns in self.turns:
                if _item_turns:
                    _items.append(_item_turns.to_dict())
            _dict['turns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in submissions (list)
        _items = []
        if self.submissions:
            for _item_submissions in self.submissions:
                if _item_submissions:
                    _items.append(_item_submissions.to_dict())
            _dict['submissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in annotations (list)
        _items = []
        if self.annotations:
            for _item_annotations in self.annotations:
                if _item_annotations:
                    _items.append(_item_annotations.to_dict())
            _dict['annotations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Thread from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "turns": [Turn.from_dict(_item) for _item in obj["turns"]] if obj.get("turns") is not None else None,
            "submissions": [Submission.from_dict(_item) for _item in obj["submissions"]] if obj.get("submissions") is not None else None,
            "annotations": [Annotation.from_dict(_item) for _item in obj["annotations"]] if obj.get("annotations") is not None else None
        })
        return _obj
