# coding: utf-8

"""
    GenAI API Spec

    Data Engine: Generative AI API Specification

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateBatchRequest(BaseModel):
    """
    CreateBatchRequest
    """ # noqa: E501
    name: StrictStr = Field(description="The name of the batch.")
    project_id: Optional[StrictStr] = Field(default=None, description="A unique identifier for the project.")
    project_name: Optional[StrictStr] = Field(default=None, description="The name of the project.")
    callback: Optional[StrictStr] = Field(default=None, description="Callback URL or email for the entity upon completion.")
    staging_batch: Optional[StrictBool] = Field(default=False, description="Whether this is a staging batch.")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Custom metadata for the entity.")
    __properties: ClassVar[List[str]] = ["name", "project_id", "project_name", "callback", "staging_batch", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        excluded_fields: Set[str] = set([
        ])
        return self.model_dump_json(by_alias=True, exclude_unset=True, exclude=excluded_fields)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateBatchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateBatchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "project_id": obj.get("project_id"),
            "project_name": obj.get("project_name"),
            "callback": obj.get("callback"),
            "staging_batch": obj.get("staging_batch") if obj.get("staging_batch") is not None else False,
            "metadata": obj.get("metadata")
        })
        return _obj
