# coding: utf-8

"""
    GenAI API Spec

    Data Engine: Generative AI API Specification

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from scaleapi.api_client.v2.models.error_detail import ErrorDetail
from scaleapi.api_client.v2.models.expandable_batch import ExpandableBatch
from scaleapi.api_client.v2.models.expandable_project import ExpandableProject
from scaleapi.api_client.v2.models.task_status import TaskStatus
from scaleapi.api_client.v2.models.thread import Thread
from typing import Optional, Set
from typing_extensions import Self

class Task(BaseModel):
    """
    Represents a single task
    """ # noqa: E501
    task_id: StrictStr = Field(description="Unique identifier for a task")
    project: ExpandableProject = Field(description="Project ID or [Project](/core-resources/project) associated with the task.")
    batch: Optional[ExpandableBatch] = Field(default=None, description="Batch ID or [Batch](/core-resources/batch) associated with the task.")
    status: TaskStatus = Field(description="Current status of the task.")
    created_at: datetime = Field(description="A timestamp formatted as an ISO 8601 date-time string.")
    completed_at: Optional[datetime] = Field(default=None, description="A timestamp formatted as an ISO 8601 date-time string.")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Task metadata defined during task creation.")
    threads: Optional[List[Thread]] = Field(default=None, description="Threads associated with the task. Tasks that do not have a `status` of `completed` will have an empty `threads` array.")
    errors: Optional[List[ErrorDetail]] = Field(default=None, description="Errors associated with the task. Available when the task status is `error`")
    __properties: ClassVar[List[str]] = ["task_id", "project", "batch", "status", "created_at", "completed_at", "metadata", "threads", "errors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        excluded_fields: Set[str] = set([
        ])
        return self.model_dump_json(by_alias=True, exclude_unset=True, exclude=excluded_fields)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Task from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of batch
        if self.batch:
            _dict['batch'] = self.batch.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in threads (list)
        _items = []
        if self.threads:
            for _item_threads in self.threads:
                if _item_threads:
                    _items.append(_item_threads.to_dict())
            _dict['threads'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Task from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "task_id": obj.get("task_id"),
            "project": ExpandableProject.from_dict(obj["project"]) if obj.get("project") is not None else None,
            "batch": ExpandableBatch.from_dict(obj["batch"]) if obj.get("batch") is not None else None,
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "completed_at": obj.get("completed_at"),
            "metadata": obj.get("metadata"),
            "threads": [Thread.from_dict(_item) for _item in obj["threads"]] if obj.get("threads") is not None else None,
            "errors": [ErrorDetail.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None
        })
        return _obj
