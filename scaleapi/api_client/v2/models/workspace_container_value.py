# coding: utf-8

"""
    GenAI API Spec

    Data Engine: Generative AI API Specification

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from scaleapi.api_client.v2.models.content_and_url import ContentAndUrl
from scaleapi.api_client.v2.models.workspace_container_config import WorkspaceContainerConfig
from scaleapi.api_client.v2.models.workspace_file import WorkspaceFile
from typing import Optional, Set
from typing_extensions import Self

class WorkspaceContainerValue(BaseModel):
    """
    WorkspaceContainerValue
    """ # noqa: E501
    workspace_id: Optional[StrictStr] = Field(default=None, description="ID of the workspace.")
    workspace_config: Optional[WorkspaceContainerConfig] = None
    last_code_run_event: Optional[Dict[str, Any]] = None
    output_files: Optional[List[WorkspaceFile]] = None
    stdout_output: Optional[ContentAndUrl] = Field(default=None, description="Standard output stream of the workspace.")
    stderr_output: Optional[ContentAndUrl] = Field(default=None, description="Standard error stream of the workspace.")
    test_stdout_output: Optional[ContentAndUrl] = Field(default=None, description="Standard output stream of the workspace for test cases.")
    test_stderr_output: Optional[ContentAndUrl] = Field(default=None, description="Standard error stream of the workspace for test cases.")
    __properties: ClassVar[List[str]] = ["workspace_id", "workspace_config", "last_code_run_event", "output_files", "stdout_output", "stderr_output", "test_stdout_output", "test_stderr_output"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        excluded_fields: Set[str] = set([
        ])
        return self.model_dump_json(by_alias=True, exclude_unset=True, exclude=excluded_fields)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkspaceContainerValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of workspace_config
        if self.workspace_config:
            _dict['workspace_config'] = self.workspace_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_code_run_event
        if self.last_code_run_event:
            _dict['last_code_run_event'] = self.last_code_run_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in output_files (list)
        _items = []
        if self.output_files:
            for _item_output_files in self.output_files:
                if _item_output_files:
                    _items.append(_item_output_files.to_dict())
            _dict['output_files'] = _items
        # override the default output from pydantic by calling `to_dict()` of stdout_output
        if self.stdout_output:
            _dict['stdout_output'] = self.stdout_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stderr_output
        if self.stderr_output:
            _dict['stderr_output'] = self.stderr_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test_stdout_output
        if self.test_stdout_output:
            _dict['test_stdout_output'] = self.test_stdout_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test_stderr_output
        if self.test_stderr_output:
            _dict['test_stderr_output'] = self.test_stderr_output.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkspaceContainerValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "workspace_id": obj.get("workspace_id"),
            "workspace_config": WorkspaceContainerConfig.from_dict(obj["workspace_config"]) if obj.get("workspace_config") is not None else None,
            "last_code_run_event": WorkspaceExecutionData.from_dict(obj["last_code_run_event"]) if obj.get("last_code_run_event") is not None else None,
            "output_files": [WorkspaceFile.from_dict(_item) for _item in obj["output_files"]] if obj.get("output_files") is not None else None,
            "stdout_output": ContentAndUrl.from_dict(obj["stdout_output"]) if obj.get("stdout_output") is not None else None,
            "stderr_output": ContentAndUrl.from_dict(obj["stderr_output"]) if obj.get("stderr_output") is not None else None,
            "test_stdout_output": ContentAndUrl.from_dict(obj["test_stdout_output"]) if obj.get("test_stdout_output") is not None else None,
            "test_stderr_output": ContentAndUrl.from_dict(obj["test_stderr_output"]) if obj.get("test_stderr_output") is not None else None
        })
        return _obj
