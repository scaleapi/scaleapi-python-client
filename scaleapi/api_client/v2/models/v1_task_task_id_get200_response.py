# coding: utf-8

"""
    GenAI API Spec

    Data Engine: Generative AI API Specification

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from scaleapi.api_client.v2.models.v1_task_task_id_get200_response_response import V1TaskTaskIdGet200ResponseResponse
from typing import Optional, Set
from typing_extensions import Self

class V1TaskTaskIdGet200Response(BaseModel):
    """
    V1TaskTaskIdGet200Response
    """ # noqa: E501
    task_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the task.")
    created_at: Optional[StrictStr] = Field(default=None, description="Timestamp when the task was created.")
    type: Optional[StrictStr] = Field(default=None, description="Type of the task")
    params: Optional[Dict[str, Any]] = Field(default=None, description="Additional parameters for the task.")
    response: Optional[V1TaskTaskIdGet200ResponseResponse] = None
    __properties: ClassVar[List[str]] = ["task_id", "created_at", "type", "params", "response"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        excluded_fields: Set[str] = set([
        ])
        return self.model_dump_json(by_alias=True, exclude_unset=True, exclude=excluded_fields)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1TaskTaskIdGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1TaskTaskIdGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "task_id": obj.get("task_id"),
            "created_at": obj.get("created_at"),
            "type": obj.get("type"),
            "params": obj.get("params"),
            "response": V1TaskTaskIdGet200ResponseResponse.from_dict(obj["response"]) if obj.get("response") is not None else None
        })
        return _obj
