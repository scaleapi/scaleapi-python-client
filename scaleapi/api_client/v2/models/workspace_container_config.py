# coding: utf-8

"""
    GenAI API Spec

    Data Engine: Generative AI API Specification

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WorkspaceContainerConfig(BaseModel):
    """
    WorkspaceContainerConfig
    """ # noqa: E501
    workspace_id: StrictStr = Field(description="ID of the workspace.")
    workspace_url: StrictStr = Field(description="A URL string pointing to a resource.")
    workspace_token: StrictStr = Field(description="Token of the workspace.")
    expires_at: StrictStr = Field(description="Expiration time of the workspace.")
    inactivity_freeze_time: StrictInt = Field(description="Inactivity freeze time of the workspace.")
    force_enable_workspace_access: Optional[StrictBool] = Field(default=None, description="Force enable workspace access.")
    workspace_image_version: Optional[StrictInt] = Field(default=None, description="Image version of the workspace.")
    __properties: ClassVar[List[str]] = ["workspace_id", "workspace_url", "workspace_token", "expires_at", "inactivity_freeze_time", "force_enable_workspace_access", "workspace_image_version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        excluded_fields: Set[str] = set([
        ])
        return self.model_dump_json(by_alias=True, exclude_unset=True, exclude=excluded_fields)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkspaceContainerConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkspaceContainerConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "workspace_id": obj.get("workspace_id"),
            "workspace_url": obj.get("workspace_url"),
            "workspace_token": obj.get("workspace_token"),
            "expires_at": obj.get("expires_at"),
            "inactivity_freeze_time": obj.get("inactivity_freeze_time"),
            "force_enable_workspace_access": obj.get("force_enable_workspace_access"),
            "workspace_image_version": obj.get("workspace_image_version")
        })
        return _obj
