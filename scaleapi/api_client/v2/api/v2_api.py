# coding: utf-8

"""
    GenAI API Spec

    Data Engine: Generative AI API Specification

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from scaleapi.api_client.v2.models.annotation import Annotation
from scaleapi.api_client.v2.models.expandable_enum_deliveries import ExpandableEnumDeliveries
from scaleapi.api_client.v2.models.expandable_enum_delivery import ExpandableEnumDelivery
from scaleapi.api_client.v2.models.expandable_enum_task import ExpandableEnumTask
from scaleapi.api_client.v2.models.get_delivered_tasks_response import GetDeliveredTasksResponse
from scaleapi.api_client.v2.models.get_deliveries_response import GetDeliveriesResponse
from scaleapi.api_client.v2.models.get_tasks_response import GetTasksResponse
from scaleapi.api_client.v2.models.option import Option
from scaleapi.api_client.v2.models.task import Task
from scaleapi.api_client.v2.models.task_status import TaskStatus

from scaleapi.api_client.v2.api_client import ApiClient, RequestSerialized
from scaleapi.api_client.v2.api_response import ApiResponse
from scaleapi.api_client.v2.rest import RESTResponseType


class V2Api:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_annotation(
        self,
        annotation_id: Annotated[StrictStr, Field(description="The unique identifier of the annotation.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Annotation:
        """Get an Annotation

        Retrieve an [Annotation](/core-resources/annotation) from its `id`.

        :param annotation_id: The unique identifier of the annotation. (required)
        :type annotation_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_annotation_serialize(
            annotation_id=annotation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Annotation",
            '500': "GetTask500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_annotation_with_http_info(
        self,
        annotation_id: Annotated[StrictStr, Field(description="The unique identifier of the annotation.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Annotation]:
        """Get an Annotation

        Retrieve an [Annotation](/core-resources/annotation) from its `id`.

        :param annotation_id: The unique identifier of the annotation. (required)
        :type annotation_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_annotation_serialize(
            annotation_id=annotation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Annotation",
            '500': "GetTask500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_annotation_without_preload_content(
        self,
        annotation_id: Annotated[StrictStr, Field(description="The unique identifier of the annotation.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get an Annotation

        Retrieve an [Annotation](/core-resources/annotation) from its `id`.

        :param annotation_id: The unique identifier of the annotation. (required)
        :type annotation_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_annotation_serialize(
            annotation_id=annotation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Annotation",
            '500': "GetTask500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_annotation_serialize(
        self,
        annotation_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if annotation_id is not None:

            _query_params.append(('annotation_id', annotation_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth',
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/annotation',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_deliveries(
        self,
        project_id: Annotated[Optional[StrictStr], Field(description="Scale's unique identifier for the project.")] = None,
        project_name: Annotated[Optional[StrictStr], Field(description="The name of the project.")] = None,
        delivered_after: Annotated[Optional[datetime], Field(description="Deliveries with a `delivered_at` after the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.")] = None,
        delivered_before: Annotated[Optional[datetime], Field(description="Deliveries with a `delivered_at` before the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.")] = None,
        expand: Annotated[Optional[List[ExpandableEnumDeliveries]], Field(description="List of fields to [expand](/api-reference/expanding-entities) in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetDeliveriesResponse:
        """List All Deliveries

        Lists of [Deliveries](/core-resources/delivery) from a [Project](/core-resources/project).

        :param project_id: Scale's unique identifier for the project.
        :type project_id: str
        :param project_name: The name of the project.
        :type project_name: str
        :param delivered_after: Deliveries with a `delivered_at` after the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.
        :type delivered_after: datetime
        :param delivered_before: Deliveries with a `delivered_at` before the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.
        :type delivered_before: datetime
        :param expand: List of fields to [expand](/api-reference/expanding-entities) in the response.
        :type expand: List[ExpandableEnumDeliveries]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_deliveries_serialize(
            project_id=project_id,
            project_name=project_name,
            delivered_after=delivered_after,
            delivered_before=delivered_before,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDeliveriesResponse",
            '500': "GetTask500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_deliveries_with_http_info(
        self,
        project_id: Annotated[Optional[StrictStr], Field(description="Scale's unique identifier for the project.")] = None,
        project_name: Annotated[Optional[StrictStr], Field(description="The name of the project.")] = None,
        delivered_after: Annotated[Optional[datetime], Field(description="Deliveries with a `delivered_at` after the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.")] = None,
        delivered_before: Annotated[Optional[datetime], Field(description="Deliveries with a `delivered_at` before the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.")] = None,
        expand: Annotated[Optional[List[ExpandableEnumDeliveries]], Field(description="List of fields to [expand](/api-reference/expanding-entities) in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetDeliveriesResponse]:
        """List All Deliveries

        Lists of [Deliveries](/core-resources/delivery) from a [Project](/core-resources/project).

        :param project_id: Scale's unique identifier for the project.
        :type project_id: str
        :param project_name: The name of the project.
        :type project_name: str
        :param delivered_after: Deliveries with a `delivered_at` after the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.
        :type delivered_after: datetime
        :param delivered_before: Deliveries with a `delivered_at` before the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.
        :type delivered_before: datetime
        :param expand: List of fields to [expand](/api-reference/expanding-entities) in the response.
        :type expand: List[ExpandableEnumDeliveries]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_deliveries_serialize(
            project_id=project_id,
            project_name=project_name,
            delivered_after=delivered_after,
            delivered_before=delivered_before,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDeliveriesResponse",
            '500': "GetTask500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_deliveries_without_preload_content(
        self,
        project_id: Annotated[Optional[StrictStr], Field(description="Scale's unique identifier for the project.")] = None,
        project_name: Annotated[Optional[StrictStr], Field(description="The name of the project.")] = None,
        delivered_after: Annotated[Optional[datetime], Field(description="Deliveries with a `delivered_at` after the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.")] = None,
        delivered_before: Annotated[Optional[datetime], Field(description="Deliveries with a `delivered_at` before the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.")] = None,
        expand: Annotated[Optional[List[ExpandableEnumDeliveries]], Field(description="List of fields to [expand](/api-reference/expanding-entities) in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List All Deliveries

        Lists of [Deliveries](/core-resources/delivery) from a [Project](/core-resources/project).

        :param project_id: Scale's unique identifier for the project.
        :type project_id: str
        :param project_name: The name of the project.
        :type project_name: str
        :param delivered_after: Deliveries with a `delivered_at` after the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.
        :type delivered_after: datetime
        :param delivered_before: Deliveries with a `delivered_at` before the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.
        :type delivered_before: datetime
        :param expand: List of fields to [expand](/api-reference/expanding-entities) in the response.
        :type expand: List[ExpandableEnumDeliveries]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_deliveries_serialize(
            project_id=project_id,
            project_name=project_name,
            delivered_after=delivered_after,
            delivered_before=delivered_before,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDeliveriesResponse",
            '500': "GetTask500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_deliveries_serialize(
        self,
        project_id,
        project_name,
        delivered_after,
        delivered_before,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'expand': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if project_id is not None:

            _query_params.append(('project_id', project_id))

        if project_name is not None:

            _query_params.append(('project_name', project_name))

        if delivered_after is not None:
            if isinstance(delivered_after, datetime):
                _query_params.append(
                    (
                        'delivered_after',
                        delivered_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('delivered_after', delivered_after))

        if delivered_before is not None:
            if isinstance(delivered_before, datetime):
                _query_params.append(
                    (
                        'delivered_before',
                        delivered_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('delivered_before', delivered_before))

        if expand is not None:

            _query_params.append(('expand', expand))

        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth',
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/deliveries',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_delivery(
        self,
        delivery_id: Annotated[Optional[StrictStr], Field(description="Scale's unique identifier for the delivery.")] = None,
        delivery_name: Annotated[Optional[StrictStr], Field(description="The name of the delivery.")] = None,
        project_id: Annotated[Optional[StrictStr], Field(description="Scale's unique identifier for the project.")] = None,
        project_name: Annotated[Optional[StrictStr], Field(description="The name of the project.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Limit the number of entities returned.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="A token used to retrieve the next page of results if there are more. You can find the `next_token` in your last request.")] = None,
        expand: Annotated[Optional[List[ExpandableEnumDelivery]], Field(description="List of fields to [expand](/api-reference/expanding-entities) in the response.")] = None,
        opts: Annotated[Optional[List[Option]], Field(description="List of properties to include in the task response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetDeliveredTasksResponse:
        """Get Tasks in a Delivery

        Retrieve multiple [Tasks](/core-resources/task) from a [Delivery](/core-resources/delivery).

        :param delivery_id: Scale's unique identifier for the delivery.
        :type delivery_id: str
        :param delivery_name: The name of the delivery.
        :type delivery_name: str
        :param project_id: Scale's unique identifier for the project.
        :type project_id: str
        :param project_name: The name of the project.
        :type project_name: str
        :param limit: Limit the number of entities returned.
        :type limit: int
        :param next_token: A token used to retrieve the next page of results if there are more. You can find the `next_token` in your last request.
        :type next_token: str
        :param expand: List of fields to [expand](/api-reference/expanding-entities) in the response.
        :type expand: List[ExpandableEnumDelivery]
        :param opts: List of properties to include in the task response.
        :type opts: List[Option]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_delivery_serialize(
            delivery_id=delivery_id,
            delivery_name=delivery_name,
            project_id=project_id,
            project_name=project_name,
            limit=limit,
            next_token=next_token,
            expand=expand,
            opts=opts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDeliveredTasksResponse",
            '500': "GetTask500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_delivery_with_http_info(
        self,
        delivery_id: Annotated[Optional[StrictStr], Field(description="Scale's unique identifier for the delivery.")] = None,
        delivery_name: Annotated[Optional[StrictStr], Field(description="The name of the delivery.")] = None,
        project_id: Annotated[Optional[StrictStr], Field(description="Scale's unique identifier for the project.")] = None,
        project_name: Annotated[Optional[StrictStr], Field(description="The name of the project.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Limit the number of entities returned.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="A token used to retrieve the next page of results if there are more. You can find the `next_token` in your last request.")] = None,
        expand: Annotated[Optional[List[ExpandableEnumDelivery]], Field(description="List of fields to [expand](/api-reference/expanding-entities) in the response.")] = None,
        opts: Annotated[Optional[List[Option]], Field(description="List of properties to include in the task response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetDeliveredTasksResponse]:
        """Get Tasks in a Delivery

        Retrieve multiple [Tasks](/core-resources/task) from a [Delivery](/core-resources/delivery).

        :param delivery_id: Scale's unique identifier for the delivery.
        :type delivery_id: str
        :param delivery_name: The name of the delivery.
        :type delivery_name: str
        :param project_id: Scale's unique identifier for the project.
        :type project_id: str
        :param project_name: The name of the project.
        :type project_name: str
        :param limit: Limit the number of entities returned.
        :type limit: int
        :param next_token: A token used to retrieve the next page of results if there are more. You can find the `next_token` in your last request.
        :type next_token: str
        :param expand: List of fields to [expand](/api-reference/expanding-entities) in the response.
        :type expand: List[ExpandableEnumDelivery]
        :param opts: List of properties to include in the task response.
        :type opts: List[Option]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_delivery_serialize(
            delivery_id=delivery_id,
            delivery_name=delivery_name,
            project_id=project_id,
            project_name=project_name,
            limit=limit,
            next_token=next_token,
            expand=expand,
            opts=opts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDeliveredTasksResponse",
            '500': "GetTask500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_delivery_without_preload_content(
        self,
        delivery_id: Annotated[Optional[StrictStr], Field(description="Scale's unique identifier for the delivery.")] = None,
        delivery_name: Annotated[Optional[StrictStr], Field(description="The name of the delivery.")] = None,
        project_id: Annotated[Optional[StrictStr], Field(description="Scale's unique identifier for the project.")] = None,
        project_name: Annotated[Optional[StrictStr], Field(description="The name of the project.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Limit the number of entities returned.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="A token used to retrieve the next page of results if there are more. You can find the `next_token` in your last request.")] = None,
        expand: Annotated[Optional[List[ExpandableEnumDelivery]], Field(description="List of fields to [expand](/api-reference/expanding-entities) in the response.")] = None,
        opts: Annotated[Optional[List[Option]], Field(description="List of properties to include in the task response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Tasks in a Delivery

        Retrieve multiple [Tasks](/core-resources/task) from a [Delivery](/core-resources/delivery).

        :param delivery_id: Scale's unique identifier for the delivery.
        :type delivery_id: str
        :param delivery_name: The name of the delivery.
        :type delivery_name: str
        :param project_id: Scale's unique identifier for the project.
        :type project_id: str
        :param project_name: The name of the project.
        :type project_name: str
        :param limit: Limit the number of entities returned.
        :type limit: int
        :param next_token: A token used to retrieve the next page of results if there are more. You can find the `next_token` in your last request.
        :type next_token: str
        :param expand: List of fields to [expand](/api-reference/expanding-entities) in the response.
        :type expand: List[ExpandableEnumDelivery]
        :param opts: List of properties to include in the task response.
        :type opts: List[Option]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_delivery_serialize(
            delivery_id=delivery_id,
            delivery_name=delivery_name,
            project_id=project_id,
            project_name=project_name,
            limit=limit,
            next_token=next_token,
            expand=expand,
            opts=opts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDeliveredTasksResponse",
            '500': "GetTask500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_delivery_serialize(
        self,
        delivery_id,
        delivery_name,
        project_id,
        project_name,
        limit,
        next_token,
        expand,
        opts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'expand': 'multi',
            'opts': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if delivery_id is not None:

            _query_params.append(('delivery_id', delivery_id))

        if delivery_name is not None:

            _query_params.append(('delivery_name', delivery_name))

        if project_id is not None:

            _query_params.append(('project_id', project_id))

        if project_name is not None:

            _query_params.append(('project_name', project_name))

        if limit is not None:

            _query_params.append(('limit', limit))

        if next_token is not None:

            _query_params.append(('next_token', next_token))

        if expand is not None:

            _query_params.append(('expand', expand))

        if opts is not None:

            _query_params.append(('opts', opts))

        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth',
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/delivery',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_task(
        self,
        task_id: Annotated[StrictStr, Field(description="Scale's unique identifier for the task.")],
        expand: Annotated[Optional[List[ExpandableEnumTask]], Field(description="List of fields to [expand](/api-reference/expanding-entities) in the response.")] = None,
        opts: Annotated[Optional[List[Option]], Field(description="List of properties to include in the task response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Task:
        """Get a Task

        Retrieve a [Task](/core-resources/task) from its `task_id`.

        :param task_id: Scale's unique identifier for the task. (required)
        :type task_id: str
        :param expand: List of fields to [expand](/api-reference/expanding-entities) in the response.
        :type expand: List[ExpandableEnumTask]
        :param opts: List of properties to include in the task response.
        :type opts: List[Option]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_task_serialize(
            task_id=task_id,
            expand=expand,
            opts=opts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Task",
            '500': "GetTask500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_task_with_http_info(
        self,
        task_id: Annotated[StrictStr, Field(description="Scale's unique identifier for the task.")],
        expand: Annotated[Optional[List[ExpandableEnumTask]], Field(description="List of fields to [expand](/api-reference/expanding-entities) in the response.")] = None,
        opts: Annotated[Optional[List[Option]], Field(description="List of properties to include in the task response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Task]:
        """Get a Task

        Retrieve a [Task](/core-resources/task) from its `task_id`.

        :param task_id: Scale's unique identifier for the task. (required)
        :type task_id: str
        :param expand: List of fields to [expand](/api-reference/expanding-entities) in the response.
        :type expand: List[ExpandableEnumTask]
        :param opts: List of properties to include in the task response.
        :type opts: List[Option]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_task_serialize(
            task_id=task_id,
            expand=expand,
            opts=opts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Task",
            '500': "GetTask500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_task_without_preload_content(
        self,
        task_id: Annotated[StrictStr, Field(description="Scale's unique identifier for the task.")],
        expand: Annotated[Optional[List[ExpandableEnumTask]], Field(description="List of fields to [expand](/api-reference/expanding-entities) in the response.")] = None,
        opts: Annotated[Optional[List[Option]], Field(description="List of properties to include in the task response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a Task

        Retrieve a [Task](/core-resources/task) from its `task_id`.

        :param task_id: Scale's unique identifier for the task. (required)
        :type task_id: str
        :param expand: List of fields to [expand](/api-reference/expanding-entities) in the response.
        :type expand: List[ExpandableEnumTask]
        :param opts: List of properties to include in the task response.
        :type opts: List[Option]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_task_serialize(
            task_id=task_id,
            expand=expand,
            opts=opts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Task",
            '500': "GetTask500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_task_serialize(
        self,
        task_id,
        expand,
        opts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'expand': 'multi',
            'opts': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if task_id is not None:

            _query_params.append(('task_id', task_id))

        if expand is not None:

            _query_params.append(('expand', expand))

        if opts is not None:

            _query_params.append(('opts', opts))

        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth',
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/task',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tasks(
        self,
        project_id: Annotated[Optional[StrictStr], Field(description="Scale's unique identifier for the project.")] = None,
        project_name: Annotated[Optional[StrictStr], Field(description="The name of the project.")] = None,
        batch_id: Annotated[Optional[StrictStr], Field(description="Scale's unique identifier for the batch.")] = None,
        batch_name: Annotated[Optional[StrictStr], Field(description="The name of the batch.")] = None,
        status: Annotated[Optional[TaskStatus], Field(description="The current status of the task, indicating whether it is pending, completed, error, or canceled.")] = None,
        completed_after: Annotated[Optional[datetime], Field(description="Tasks with a `completed_at` after the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.")] = None,
        completed_before: Annotated[Optional[datetime], Field(description="Tasks with a `completed_at` before the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Limit the number of entities returned.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="A token used to retrieve the next page of results if there are more. You can find the `next_token` in your last request.")] = None,
        expand: Annotated[Optional[List[ExpandableEnumTask]], Field(description="List of fields to [expand](/api-reference/expanding-entities) in the response.")] = None,
        opts: Annotated[Optional[List[Option]], Field(description="List of properties to include in the task response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetTasksResponse:
        """Get Multiple Tasks

        Retrieve multiple [Tasks](/core-resources/task) from a [Project](/core-resources/project) or [Batch](/core-resources/batch).

        :param project_id: Scale's unique identifier for the project.
        :type project_id: str
        :param project_name: The name of the project.
        :type project_name: str
        :param batch_id: Scale's unique identifier for the batch.
        :type batch_id: str
        :param batch_name: The name of the batch.
        :type batch_name: str
        :param status: The current status of the task, indicating whether it is pending, completed, error, or canceled.
        :type status: TaskStatus
        :param completed_after: Tasks with a `completed_at` after the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.
        :type completed_after: datetime
        :param completed_before: Tasks with a `completed_at` before the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.
        :type completed_before: datetime
        :param limit: Limit the number of entities returned.
        :type limit: int
        :param next_token: A token used to retrieve the next page of results if there are more. You can find the `next_token` in your last request.
        :type next_token: str
        :param expand: List of fields to [expand](/api-reference/expanding-entities) in the response.
        :type expand: List[ExpandableEnumTask]
        :param opts: List of properties to include in the task response.
        :type opts: List[Option]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tasks_serialize(
            project_id=project_id,
            project_name=project_name,
            batch_id=batch_id,
            batch_name=batch_name,
            status=status,
            completed_after=completed_after,
            completed_before=completed_before,
            limit=limit,
            next_token=next_token,
            expand=expand,
            opts=opts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTasksResponse",
            '500': "GetTask500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tasks_with_http_info(
        self,
        project_id: Annotated[Optional[StrictStr], Field(description="Scale's unique identifier for the project.")] = None,
        project_name: Annotated[Optional[StrictStr], Field(description="The name of the project.")] = None,
        batch_id: Annotated[Optional[StrictStr], Field(description="Scale's unique identifier for the batch.")] = None,
        batch_name: Annotated[Optional[StrictStr], Field(description="The name of the batch.")] = None,
        status: Annotated[Optional[TaskStatus], Field(description="The current status of the task, indicating whether it is pending, completed, error, or canceled.")] = None,
        completed_after: Annotated[Optional[datetime], Field(description="Tasks with a `completed_at` after the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.")] = None,
        completed_before: Annotated[Optional[datetime], Field(description="Tasks with a `completed_at` before the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Limit the number of entities returned.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="A token used to retrieve the next page of results if there are more. You can find the `next_token` in your last request.")] = None,
        expand: Annotated[Optional[List[ExpandableEnumTask]], Field(description="List of fields to [expand](/api-reference/expanding-entities) in the response.")] = None,
        opts: Annotated[Optional[List[Option]], Field(description="List of properties to include in the task response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetTasksResponse]:
        """Get Multiple Tasks

        Retrieve multiple [Tasks](/core-resources/task) from a [Project](/core-resources/project) or [Batch](/core-resources/batch).

        :param project_id: Scale's unique identifier for the project.
        :type project_id: str
        :param project_name: The name of the project.
        :type project_name: str
        :param batch_id: Scale's unique identifier for the batch.
        :type batch_id: str
        :param batch_name: The name of the batch.
        :type batch_name: str
        :param status: The current status of the task, indicating whether it is pending, completed, error, or canceled.
        :type status: TaskStatus
        :param completed_after: Tasks with a `completed_at` after the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.
        :type completed_after: datetime
        :param completed_before: Tasks with a `completed_at` before the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.
        :type completed_before: datetime
        :param limit: Limit the number of entities returned.
        :type limit: int
        :param next_token: A token used to retrieve the next page of results if there are more. You can find the `next_token` in your last request.
        :type next_token: str
        :param expand: List of fields to [expand](/api-reference/expanding-entities) in the response.
        :type expand: List[ExpandableEnumTask]
        :param opts: List of properties to include in the task response.
        :type opts: List[Option]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tasks_serialize(
            project_id=project_id,
            project_name=project_name,
            batch_id=batch_id,
            batch_name=batch_name,
            status=status,
            completed_after=completed_after,
            completed_before=completed_before,
            limit=limit,
            next_token=next_token,
            expand=expand,
            opts=opts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTasksResponse",
            '500': "GetTask500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tasks_without_preload_content(
        self,
        project_id: Annotated[Optional[StrictStr], Field(description="Scale's unique identifier for the project.")] = None,
        project_name: Annotated[Optional[StrictStr], Field(description="The name of the project.")] = None,
        batch_id: Annotated[Optional[StrictStr], Field(description="Scale's unique identifier for the batch.")] = None,
        batch_name: Annotated[Optional[StrictStr], Field(description="The name of the batch.")] = None,
        status: Annotated[Optional[TaskStatus], Field(description="The current status of the task, indicating whether it is pending, completed, error, or canceled.")] = None,
        completed_after: Annotated[Optional[datetime], Field(description="Tasks with a `completed_at` after the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.")] = None,
        completed_before: Annotated[Optional[datetime], Field(description="Tasks with a `completed_at` before the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Limit the number of entities returned.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="A token used to retrieve the next page of results if there are more. You can find the `next_token` in your last request.")] = None,
        expand: Annotated[Optional[List[ExpandableEnumTask]], Field(description="List of fields to [expand](/api-reference/expanding-entities) in the response.")] = None,
        opts: Annotated[Optional[List[Option]], Field(description="List of properties to include in the task response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Multiple Tasks

        Retrieve multiple [Tasks](/core-resources/task) from a [Project](/core-resources/project) or [Batch](/core-resources/batch).

        :param project_id: Scale's unique identifier for the project.
        :type project_id: str
        :param project_name: The name of the project.
        :type project_name: str
        :param batch_id: Scale's unique identifier for the batch.
        :type batch_id: str
        :param batch_name: The name of the batch.
        :type batch_name: str
        :param status: The current status of the task, indicating whether it is pending, completed, error, or canceled.
        :type status: TaskStatus
        :param completed_after: Tasks with a `completed_at` after the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.
        :type completed_after: datetime
        :param completed_before: Tasks with a `completed_at` before the given date will be returned. A timestamp formatted as an ISO 8601 date-time string.
        :type completed_before: datetime
        :param limit: Limit the number of entities returned.
        :type limit: int
        :param next_token: A token used to retrieve the next page of results if there are more. You can find the `next_token` in your last request.
        :type next_token: str
        :param expand: List of fields to [expand](/api-reference/expanding-entities) in the response.
        :type expand: List[ExpandableEnumTask]
        :param opts: List of properties to include in the task response.
        :type opts: List[Option]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tasks_serialize(
            project_id=project_id,
            project_name=project_name,
            batch_id=batch_id,
            batch_name=batch_name,
            status=status,
            completed_after=completed_after,
            completed_before=completed_before,
            limit=limit,
            next_token=next_token,
            expand=expand,
            opts=opts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTasksResponse",
            '500': "GetTask500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tasks_serialize(
        self,
        project_id,
        project_name,
        batch_id,
        batch_name,
        status,
        completed_after,
        completed_before,
        limit,
        next_token,
        expand,
        opts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'expand': 'multi',
            'opts': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if project_id is not None:

            _query_params.append(('project_id', project_id))

        if project_name is not None:

            _query_params.append(('project_name', project_name))

        if batch_id is not None:

            _query_params.append(('batch_id', batch_id))

        if batch_name is not None:

            _query_params.append(('batch_name', batch_name))

        if status is not None:

            _query_params.append(('status', status.value))

        if completed_after is not None:
            if isinstance(completed_after, datetime):
                _query_params.append(
                    (
                        'completed_after',
                        completed_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('completed_after', completed_after))

        if completed_before is not None:
            if isinstance(completed_before, datetime):
                _query_params.append(
                    (
                        'completed_before',
                        completed_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('completed_before', completed_before))

        if limit is not None:

            _query_params.append(('limit', limit))

        if next_token is not None:

            _query_params.append(('next_token', next_token))

        if expand is not None:

            _query_params.append(('expand', expand))

        if opts is not None:

            _query_params.append(('opts', opts))

        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth',
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/tasks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )
